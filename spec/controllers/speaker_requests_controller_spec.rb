require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe SpeakerRequestsController do

  # # This should return the minimal set of attributes required to create a valid
  # # SpeakerRequest. As you add validations to SpeakerRequest, be sure to
  # # adjust the attributes here as well.
  # let(:valid_attributes) { { "title" => "MyString" } }

  # # This should return the minimal set of values that should be in the session
  # # in order to pass any filters (e.g. authentication) defined in
  # # SpeakerRequestsController. Be sure to keep this updated too.
  # let(:valid_session) { {} }

  # describe "GET index" do
  #   it "assigns all speaker_requests as @speaker_requests" do
  #     speaker_request = SpeakerRequest.create! valid_attributes
  #     get :index, {}, valid_session
  #     assigns(:speaker_requests).should eq([speaker_request])
  #   end
  # end

  # describe "GET show" do
  #   it "assigns the requested speaker_request as @speaker_request" do
  #     speaker_request = SpeakerRequest.create! valid_attributes
  #     get :show, {:id => speaker_request.to_param}, valid_session
  #     assigns(:speaker_request).should eq(speaker_request)
  #   end
  # end

  # describe "GET new" do
  #   it "assigns a new speaker_request as @speaker_request" do
  #     get :new, {}, valid_session
  #     assigns(:speaker_request).should be_a_new(SpeakerRequest)
  #   end
  # end

  # describe "GET edit" do
  #   it "assigns the requested speaker_request as @speaker_request" do
  #     speaker_request = SpeakerRequest.create! valid_attributes
  #     get :edit, {:id => speaker_request.to_param}, valid_session
  #     assigns(:speaker_request).should eq(speaker_request)
  #   end
  # end

  # describe "POST create" do
  #   describe "with valid params" do
  #     it "creates a new SpeakerRequest" do
  #       expect {
  #         post :create, {:speaker_request => valid_attributes}, valid_session
  #       }.to change(SpeakerRequest, :count).by(1)
  #     end

  #     it "assigns a newly created speaker_request as @speaker_request" do
  #       post :create, {:speaker_request => valid_attributes}, valid_session
  #       assigns(:speaker_request).should be_a(SpeakerRequest)
  #       assigns(:speaker_request).should be_persisted
  #     end

  #     it "redirects to the created speaker_request" do
  #       post :create, {:speaker_request => valid_attributes}, valid_session
  #       response.should redirect_to(SpeakerRequest.last)
  #     end
  #   end

  #   describe "with invalid params" do
  #     it "assigns a newly created but unsaved speaker_request as @speaker_request" do
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       SpeakerRequest.any_instance.stub(:save).and_return(false)
  #       post :create, {:speaker_request => { "title" => "invalid value" }}, valid_session
  #       assigns(:speaker_request).should be_a_new(SpeakerRequest)
  #     end

  #     it "re-renders the 'new' template" do
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       SpeakerRequest.any_instance.stub(:save).and_return(false)
  #       post :create, {:speaker_request => { "title" => "invalid value" }}, valid_session
  #       response.should render_template("new")
  #     end
  #   end
  # end

  # describe "PUT update" do
  #   describe "with valid params" do
  #     it "updates the requested speaker_request" do
  #       speaker_request = SpeakerRequest.create! valid_attributes
  #       # Assuming there are no other speaker_requests in the database, this
  #       # specifies that the SpeakerRequest created on the previous line
  #       # receives the :update_attributes message with whatever params are
  #       # submitted in the request.
  #       SpeakerRequest.any_instance.should_receive(:update_attributes).with({ "title" => "MyString" })
  #       put :update, {:id => speaker_request.to_param, :speaker_request => { "title" => "MyString" }}, valid_session
  #     end

  #     it "assigns the requested speaker_request as @speaker_request" do
  #       speaker_request = SpeakerRequest.create! valid_attributes
  #       put :update, {:id => speaker_request.to_param, :speaker_request => valid_attributes}, valid_session
  #       assigns(:speaker_request).should eq(speaker_request)
  #     end

  #     it "redirects to the speaker_request" do
  #       speaker_request = SpeakerRequest.create! valid_attributes
  #       put :update, {:id => speaker_request.to_param, :speaker_request => valid_attributes}, valid_session
  #       response.should redirect_to(speaker_request)
  #     end
  #   end

  #   describe "with invalid params" do
  #     it "assigns the speaker_request as @speaker_request" do
  #       speaker_request = SpeakerRequest.create! valid_attributes
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       SpeakerRequest.any_instance.stub(:save).and_return(false)
  #       put :update, {:id => speaker_request.to_param, :speaker_request => { "title" => "invalid value" }}, valid_session
  #       assigns(:speaker_request).should eq(speaker_request)
  #     end

  #     it "re-renders the 'edit' template" do
  #       speaker_request = SpeakerRequest.create! valid_attributes
  #       # Trigger the behavior that occurs when invalid params are submitted
  #       SpeakerRequest.any_instance.stub(:save).and_return(false)
  #       put :update, {:id => speaker_request.to_param, :speaker_request => { "title" => "invalid value" }}, valid_session
  #       response.should render_template("edit")
  #     end
  #   end
  # end

  # describe "DELETE destroy" do
  #   it "destroys the requested speaker_request" do
  #     speaker_request = SpeakerRequest.create! valid_attributes
  #     expect {
  #       delete :destroy, {:id => speaker_request.to_param}, valid_session
  #     }.to change(SpeakerRequest, :count).by(-1)
  #   end

  #   it "redirects to the speaker_requests list" do
  #     speaker_request = SpeakerRequest.create! valid_attributes
  #     delete :destroy, {:id => speaker_request.to_param}, valid_session
  #     response.should redirect_to(speaker_requests_url)
  #   end
  # end

end
